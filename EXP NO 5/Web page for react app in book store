import React, { useState, useMemo } from 'react';


const MOCK_BOOKS = [
    {
        id: 1,
        title: "The Silent Reader",
        author: "Anya Sharma",
        genre: "Mystery",
        price: 18.99,
        cover: "https://placehold.co/400x600/1e293b/cbd5e1?text=Mystery",
    },
    {
        id: 2,
        title: "Digital Fortress",
        author: "Ethan Vance",
        genre: "Technology",
        price: 25.50,
        cover: "https://placehold.co/400x600/374151/f3f4f6?text=Tech",
    },
    {
        id: 3,
        title: "Echoes of the Past",
        author: "Lana Chen",
        genre: "History",
        price: 14.75,
        cover: "https://placehold.co/400x600/4b5563/d1d5db?text=History",
    },
    {
        id: 4,
        title: "Cosmic Odyssey",
        author: "Dr. Kaelen Ray",
        genre: "Science Fiction",
        price: 22.00,
        cover: "https://placehold.co/400x600/0f172a/94a3b8?text=Sci-Fi",
    },
    {
        id: 5,
        title: "The Art of Simplicity",
        author: "Hiroshi Sato",
        genre: "Self-Help",
        price: 12.99,
        cover: "https://placehold.co/400x600/f3f4f6/374151?text=Self-Help",
    },
];

/**
 * Cart Icon (Inline SVG to avoid external imports)
 */
const ShoppingCartIcon = (props) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}>
        <circle cx="9" cy="21" r="1" />
        <circle cx="20" cy="21" r="1" />
        <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6" />
    </svg>
);

/**
 * Single Book Card Component
 */
const BookCard = ({ book, onAddToCart }) => {
    return (
        <div className="bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300 overflow-hidden border border-gray-100 flex flex-col">
            <div className="h-64 sm:h-80 overflow-hidden">
                <img
                    src={book.cover}
                    alt={`${book.title} cover`}
                    className="w-full h-full object-cover transition-transform duration-500 hover:scale-105"
                    onError={(e) => { e.target.onerror = null; e.target.src = "https://placehold.co/400x600/1e293b/cbd5e1?text=Book+Cover"; }}
                />
            </div>
            <div className="p-4 flex flex-col flex-grow">
                <h3 className="text-xl font-bold text-gray-900 mb-1 leading-tight">{book.title}</h3>
                <p className="text-sm text-indigo-600 font-medium mb-2">{book.author}</p>
                <div className="flex justify-between items-center mt-auto pt-2">
                    <span className="text-2xl font-extrabold text-gray-800">${book.price.toFixed(2)}</span>
                    <button
                        onClick={() => onAddToCart(book)}
                        className="flex items-center space-x-1 bg-indigo-600 text-white text-sm font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-indigo-700 transition duration-150 transform hover:scale-105"
                    >
                        {/* Plus Icon SVG */}
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M5 12h14" /><path d="M12 5v14" /></svg>
                        <span>Add</span>
                    </button>
                </div>
            </div>
        </div>
    );
};

/**
 * Header and Navigation Component
 */
const Header = ({ cartCount, onCartClick, searchQuery, onSearchChange }) => {
    return (
        <header className="bg-indigo-700 shadow-xl sticky top-0 z-10">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex flex-col md:flex-row justify-between items-center">
                <div className="text-2xl font-extrabold text-white tracking-wider mb-4 md:mb-0">
                    The Literary Nook
                </div>

                <div className="flex items-center space-x-4 w-full md:w-auto">
                    {/* Search Input */}
                    <div className="relative flex-grow">
                        <input
                            type="text"
                            placeholder="Search by title or author..."
                            value={searchQuery}
                            onChange={onSearchChange}
                            className="w-full md:w-80 px-4 py-2 pl-10 rounded-lg text-gray-900 focus:ring-indigo-300 focus:border-indigo-300 border-transparent transition duration-150"
                        />
                        {/* Search Icon SVG */}
                        <svg className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="11" cy="11" r="8" /><line x1="21" y1="21" x2="16.65" y2="16.65" /></svg>
                    </div>

                    {/* Cart Button */}
                    <button
                        onClick={onCartClick}
                        className="relative p-2 rounded-full bg-indigo-600 text-white hover:bg-indigo-500 transition duration-150 transform hover:scale-105 shadow-md"
                        aria-label="View Shopping Cart"
                    >
                        <ShoppingCartIcon className="w-6 h-6" />
                        {cartCount > 0 && (
                            <span className="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-red-100 transform translate-x-1/2 -translate-y-1/2 bg-red-600 rounded-full">
                                {cartCount}
                            </span>
                        )}
                    </button>
                </div>
            </div>
        </header>
    );
};

/**
 * Shopping Cart Modal Component
 */
const CartModal = ({ cartItems, isVisible, onClose, onRemoveFromCart }) => {
    if (!isVisible) return null;

    const subtotal = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);

    return (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-start justify-center p-4 z-50 transition-opacity duration-300">
            <div className="bg-white w-full max-w-lg mt-10 rounded-xl shadow-2xl p-6 relative transform transition-all duration-300 scale-100">
                
                <h2 className="text-2xl font-bold text-gray-900 border-b pb-3 mb-4 flex justify-between items-center">
                    Your Shopping Cart
                    <span className="text-sm text-gray-500 font-normal">({cartItems.length} items)</span>
                </h2>

                <div className="max-h-96 overflow-y-auto pr-2">
                    {cartItems.length === 0 ? (
                        <p className="text-gray-500 py-10 text-center italic">Your cart is empty. Time to find a good read!</p>
                    ) : (
                        cartItems.map(item => (
                            <div key={item.id} className="flex items-center justify-between py-3 border-b border-gray-100 last:border-b-0">
                                <div className="flex items-center space-x-3">
                                    <div className="flex-shrink-0 w-10 h-10 bg-gray-200 rounded-lg overflow-hidden">
                                        <img 
                                            src={item.cover} 
                                            alt={item.title} 
                                            className="w-full h-full object-cover"
                                            onError={(e) => { e.target.onerror = null; e.target.src = "https://placehold.co/400x600/1e293b/cbd5e1?text=Book"; }}
                                        />
                                    </div>
                                    <div>
                                        <p className="font-semibold text-gray-800 leading-tight">{item.title}</p>
                                        <p className="text-xs text-gray-500">Qty: {item.quantity} @ ${item.price.toFixed(2)}</p>
                                    </div>
                                </div>
                                <div className="flex items-center space-x-4">
                                    <span className="font-bold text-gray-900">${(item.price * item.quantity).toFixed(2)}</span>
                                    <button
                                        onClick={() => onRemoveFromCart(item.id)}
                                        className="text-red-500 hover:text-red-700 transition duration-150 p-1 rounded-full hover:bg-red-50"
                                        aria-label={`Remove ${item.title}`}
                                    >
                                        {/* X Icon SVG */}
                                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 6L6 18" /><path d="M6 6l12 12" /></svg>
                                    </button>
                                </div>
                            </div>
                        ))
                    )}
                </div>

                <div className="mt-6 pt-4 border-t border-gray-200">
                    <div className="flex justify-between items-center text-xl font-bold text-gray-900 mb-4">
                        <span>Subtotal:</span>
                        <span>${subtotal.toFixed(2)}</span>
                    </div>

                    <button
                        onClick={() => {
                            if (cartItems.length > 0) {
                                // Simulate checkout action
                                alert('Simulated Checkout! Total: $' + subtotal.toFixed(2));
                                onClose(); // Close modal after action
                            } else {
                                alert('Your cart is empty.');
                            }
                        }}
                        className="w-full py-3 bg-indigo-600 text-white font-semibold rounded-lg shadow-lg hover:bg-indigo-700 transition duration-150"
                        disabled={cartItems.length === 0}
                    >
                        Proceed to Checkout
                    </button>
                </div>
                
                {/* Close Button */}
                <button
                    onClick={onClose}
                    className="absolute top-3 right-3 text-gray-400 hover:text-gray-600 transition"
                    aria-label="Close modal"
                >
                    {/* X Icon SVG (for close) */}
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 6L6 18" /><path d="M6 6l12 12" /></svg>
                </button>
            </div>
        </div>
    );
};

/**
 * Main Application Component
 */
const App = () => {
    const [cart, setCart] = useState([]);
    const [isCartVisible, setIsCartVisible] = useState(false);
    const [searchQuery, setSearchQuery] = useState('');
    const [selectedGenre, setSelectedGenre] = useState('All');

    const genres = useMemo(() => ['All', ...new Set(MOCK_BOOKS.map(book => book.genre))], []);

    // Function to add a book to the cart
    const handleAddToCart = (bookToAdd) => {
        setCart(prevCart => {
            const existingItem = prevCart.find(item => item.id === bookToAdd.id);
            if (existingItem) {
                return prevCart.map(item =>
                    item.id === bookToAdd.id
                        ? { ...item, quantity: item.quantity + 1 }
                        : item
                );
            } else {
                return [...prevCart, { ...bookToAdd, quantity: 1 }];
            }
        });
    };

    // Function to remove all quantity of a book from the cart
    const handleRemoveFromCart = (bookId) => {
        setCart(prevCart => prevCart.filter(item => item.id !== bookId));
    };

    // Filter books based on search query and selected genre
    const filteredBooks = useMemo(() => {
        let books = MOCK_BOOKS;
        
        // 1. Filter by Genre
        if (selectedGenre !== 'All') {
            books = books.filter(book => book.genre === selectedGenre);
        }

        // 2. Filter by Search Query
        if (searchQuery.trim() !== '') {
            const lowerCaseQuery = searchQuery.toLowerCase();
            books = books.filter(book =>
                book.title.toLowerCase().includes(lowerCaseQuery) ||
                book.author.toLowerCase().includes(lowerCaseQuery)
            );
        }

        return books;
    }, [searchQuery, selectedGenre]);

    const totalCartItems = cart.reduce((total, item) => total + item.quantity, 0);

    return (
        <div className="min-h-screen bg-gray-50">
            <Header
                cartCount={totalCartItems}
                onCartClick={() => setIsCartVisible(true)}
                searchQuery={searchQuery}
                onSearchChange={(e) => setSearchQuery(e.target.value)}
            />

            <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                <div className="mb-8">
                    <h2 className="text-3xl font-extrabold text-gray-900 mb-4">Book Catalog</h2>
                    
                    {/* Genre Filter Tabs */}
                    <div className="flex flex-wrap gap-2">
                        {genres.map(genre => (
                            <button
                                key={genre}
                                onClick={() => {
                                    setSelectedGenre(genre);
                                    setSearchQuery(''); // Clear search when switching genre
                                }}
                                className={`px-4 py-2 text-sm font-medium rounded-full transition duration-150 ${
                                    selectedGenre === genre
                                        ? 'bg-indigo-600 text-white shadow-md'
                                        : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-200'
                                }`}
                            >
                                {genre}
                            </button>
                        ))}
                    </div>
                </div>

                {filteredBooks.length > 0 ? (
                    <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
                        {filteredBooks.map(book => (
                            <BookCard
                                key={book.id}
                                book={book}
                                onAddToCart={handleAddToCart}
                            />
                        ))}
                    </div>
                ) : (
                    <div className="text-center py-20 bg-white rounded-xl shadow-lg">
                        <p className="text-xl text-gray-600 font-medium">No books found matching your criteria.</p>
                        <p className="text-sm text-gray-400 mt-2">Try adjusting your search or selecting a different genre.</p>
                    </div>
                )}
            </main>

            {/* Shopping Cart Modal */}
            <CartModal
                cartItems={cart}
                isVisible={isCartVisible}
                onClose={() => setIsCartVisible(false)}
                onRemoveFromCart={handleRemoveFromCart}
            />

            {/* Footer */}
            <footer className="bg-gray-800 text-white mt-12">
                <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8 text-center text-sm">
                    &copy; 2025 The Literary Nook. All rights reserved.
                </div>
            </footer>
        </div>
    );
};

export default App;
